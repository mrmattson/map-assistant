// Generated by CoffeeScript 1.12.5

/* eslint-disable */
var LocRec;

import _ from 'lodash';

import pad from 'pad';

import mgrsLib from 'mgrs';

LocRec = (function() {
  var eastingNorthingRegEx, hemisphereLatRegEx, hemisphereLonRegEx, latLonRegEx, mgrsRegEx, signRegEx;
  latLonRegEx = /\s*((?:([+-]|\b[NnSs])\x20*)?(\d{1,2})(?:[:°]?\x20*(\d{1,2})(?:[:'′]?\x20*(\d{1,2})(?:\.(\d+))?[:"″]?\x20*|(?:\.(\d+))?[:'′]?\x20*)|(?:\.(\d+))?[°]?\x20*)([NnSs]?))[\s,;\/]*((?:([+-]|[EeWw])\x20*)?(\d{1,3})(?:[:°]?\x20*(\d{1,2})(?:[:'′]?\x20*(\d{1,2})(?:\.(\d+))?[:"″]?\x20*|(?:\.(\d+))?[:'′]?\x20*)|(?:\.(\d+))?[°]?\x20*)((?:[EeWw]\b)?))\s*/;
  signRegEx = /[+-]/;
  hemisphereLatRegEx = /[NnSs]/;
  hemisphereLonRegEx = /[EeWw]/;
  mgrsRegEx = /\s*((\d{1,2}[A-Za-z])[\x20\t]*(?:([A-Za-z]{2})[\x20\t]*(\d{5}[\x20\t]*\d{5}|\d{4}[\x20\t]*\d{4}|\d{3}[\x20\t]*\d{3}|\d{2}[\x20\t]*\d{2}|\d{1}[\x20\t]*\d{1})))\s*/;
  eastingNorthingRegEx = /(\d{1,5})[\x20*\t]*(\d{1,5})/;
  return {
    mgrsExtract: function(inputString) {
      var DEBUG, easting, eastingAndNorthing, formattedMgrs, gridZoneDesignator, i, latLon, len, mgrs, northing, object, oneHundredThousandIdentifier, originalInput, originalStringIndex, regExExecArray, regExIndex, regExResult, resultObjectsArray, resultsArray;
      DEBUG = false;
      originalStringIndex = 0;
      resultObjectsArray = [];
      regExIndex = inputString.search(mgrsRegEx);
      while (regExIndex !== -1) {
        if (DEBUG) {
          console.log("regExIndex: " + regExIndex);
        }
        originalStringIndex = originalStringIndex + regExIndex;
        regExExecArray = mgrsRegEx.exec(inputString);
        if (DEBUG) {
          console.log("regExExecArray: " + (JSON.stringify(regExExecArray)));
        }
        resultObjectsArray.push({
          startIndex: originalStringIndex,
          length: regExExecArray[0].length,
          regExCapGrpsArray: regExExecArray,
          originalInput: regExExecArray[0]
        });
        if (DEBUG) {
          console.log("Current resultsObjectArray: " + (JSON.stringify(resultObjectsArray)));
        }
        originalStringIndex = originalStringIndex + _.last(resultObjectsArray).length;
        if (DEBUG) {
          console.log("originalStringIndex: " + originalStringIndex);
        }
        inputString = inputString.substr(regExIndex + _.last(resultObjectsArray).length);
        if (DEBUG) {
          console.log("inputString: " + inputString);
        }
        regExIndex = inputString.search(mgrsRegEx);
      }
      regExExecArray = [];
      resultsArray = [];
      if (!_.isEmpty(resultObjectsArray)) {
        for (i = 0, len = resultObjectsArray.length; i < len; i++) {
          object = resultObjectsArray[i];
          regExResult = object.regExCapGrpsArray;
          originalInput = regExResult[1];
          gridZoneDesignator = regExResult[2];
          if (DEBUG) {
            console.log("gridZoneDesignator: " + gridZoneDesignator);
          }
          oneHundredThousandIdentifier = regExResult[3];
          if (DEBUG) {
            console.log("oneHundredThousandIdentifier: " + oneHundredThousandIdentifier);
          }
          eastingAndNorthing = regExResult[4];
          if (DEBUG) {
            console.log("eastingAndNorthing: " + eastingAndNorthing);
          }
          regExExecArray = eastingNorthingRegEx.exec(eastingAndNorthing);
          easting = regExExecArray[1];
          if (DEBUG) {
            console.log("easting: " + easting);
          }
          northing = regExExecArray[2];
          if (DEBUG) {
            console.log("northing: " + northing);
          }
          mgrs = "" + gridZoneDesignator + oneHundredThousandIdentifier + easting + northing;
          formattedMgrs = gridZoneDesignator + " " + oneHundredThousandIdentifier + " " + easting + " " + northing;
          if (DEBUG) {
            console.log("formattedMgrs: " + formattedMgrs);
          }
          latLon = mgrsLib.toPoint(mgrs);
          if (DEBUG) {
            console.log("latLon: " + (JSON.stringify(latLon)));
          }
          resultsArray.push({
            originalFormat: 'mgrs',
            originalInput: originalInput,
            latitude: latLon[1],
            longitude: latLon[0],
            mgrs: mgrs,
            formattedMgrs: formattedMgrs
          });
        }
      }
      if (DEBUG) {
        console.log(JSON.stringify(resultsArray));
      }
      return resultsArray;
    },
    latLonExtract: function(inputString) {
      var DEBUG, cleanLatitude, cleanLongitude, degreesLat, degreesLatDecimal, degreesLatWhole, degreesLon, degreesLonDecimal, degreesLonWhole, hemisphereLat, hemisphereLon, i, leadingLatSignHemisphere, leadingLonSignHemisphere, len, minutesLat, minutesLatDecimal, minutesLatWhole, minutesLon, minutesLonDecimal, minutesLonWhole, mixedDecimal, mixedWhole, object, originalInput, originalLat, originalLon, originalStringIndex, regExExecArray, regExIndex, regExResult, resultObjectsArray, resultsArray, secondsLat, secondsLatDecimal, secondsLatWhole, secondsLon, secondsLonDecimal, secondsLonWhole, trailingLatHemisphere, trailingLonHemisphere, workingLat, workingLon;
      DEBUG = false;
      originalStringIndex = 0;
      resultObjectsArray = [];
      regExIndex = inputString.search(latLonRegEx);
      while (regExIndex !== -1) {
        if (DEBUG) {
          console.log("regExIndex: " + regExIndex);
        }
        originalStringIndex = originalStringIndex + regExIndex;
        regExExecArray = latLonRegEx.exec(inputString);
        if (DEBUG) {
          console.log("regExExecArray: " + (JSON.stringify(regExExecArray)));
        }
        resultObjectsArray.push({
          startIndex: originalStringIndex,
          length: regExExecArray[0].length,
          regExCapGrpsArray: regExExecArray,
          originalInput: regExExecArray[0]
        });
        if (DEBUG) {
          console.log("Current resultsObjectArray: " + (JSON.stringify(resultObjectsArray)));
        }
        originalStringIndex = originalStringIndex + _.last(resultObjectsArray).length;
        if (DEBUG) {
          console.log("originalStringIndex: " + originalStringIndex);
        }
        inputString = inputString.substr(regExIndex + _.last(resultObjectsArray).length);
        if (DEBUG) {
          console.log("inputString: " + inputString);
        }
        regExIndex = inputString.search(latLonRegEx);
      }
      resultsArray = [];
      if (!_.isEmpty(resultObjectsArray)) {
        for (i = 0, len = resultObjectsArray.length; i < len; i++) {
          object = resultObjectsArray[i];
          regExResult = object.regExCapGrpsArray;
          originalInput = regExResult[0];
          originalLat = regExResult[1];
          degreesLatWhole = regExResult[3];
          degreesLatDecimal = regExResult[8];
          minutesLatWhole = regExResult[4];
          minutesLatDecimal = regExResult[7];
          secondsLatWhole = regExResult[5];
          secondsLatDecimal = regExResult[6];
          leadingLatSignHemisphere = regExResult[2];
          trailingLatHemisphere = regExResult[9];
          originalLon = regExResult[10];
          degreesLonWhole = regExResult[12];
          degreesLonDecimal = regExResult[17];
          minutesLonWhole = regExResult[13];
          minutesLonDecimal = regExResult[16];
          secondsLonWhole = regExResult[14];
          secondsLonDecimal = regExResult[15];
          leadingLonSignHemisphere = regExResult[11];
          trailingLonHemisphere = regExResult[18];
          mixedWhole = 0;
          mixedDecimal = 0.0;
          degreesLat = 0.0;
          minutesLat = 0.0;
          secondsLat = 0.0;
          degreesLon = 0.0;
          minutesLon = 0.0;
          secondsLon = 0.0;
          if (_.isUndefined(degreesLatDecimal)) {
            degreesLat = parseInt(degreesLatWhole, 10);
            cleanLatitude = "" + (pad(2, degreesLat, '0'));
            if (!_.isUndefined(minutesLatWhole)) {
              if (_.isUndefined(minutesLatDecimal)) {
                minutesLat = parseInt(minutesLatWhole, 10);
                cleanLatitude = cleanLatitude + " " + (pad(2, minutesLat, '0'));
                if (!_.isUndefined(secondsLatWhole)) {
                  if (_.isUndefined(secondsLatDecimal)) {
                    secondsLat = parseInt(secondsLatWhole, 10);
                    cleanLatitude = cleanLatitude + " " + (pad(2, secondsLat, '0'));
                  } else {
                    mixedWhole = secondsLatWhole;
                    mixedDecimal = secondsLatDecimal;
                    secondsLat = parseFloat(mixedWhole + "." + mixedDecimal);
                    cleanLatitude = cleanLatitude + " " + (pad(2, secondsLat, '0'));
                  }
                }
              } else {
                mixedWhole = minutesLatWhole;
                mixedDecimal = minutesLatDecimal;
                minutesLat = parseFloat(mixedWhole + "." + mixedDecimal);
                cleanLatitude = cleanLatitude + " " + (pad(2, minutesLat, '0'));
              }
            }
          } else {
            mixedWhole = degreesLatWhole;
            mixedDecimal = degreesLatDecimal;
            degreesLat = parseFloat(mixedWhole + "." + mixedDecimal);
            cleanLatitude = "" + (pad(2, degreesLat, '0'));
          }
          if (_.isUndefined(degreesLonDecimal)) {
            degreesLon = parseInt(degreesLonWhole, 10);
            cleanLongitude = "" + (pad(3, degreesLon, '0'));
            if (!_.isUndefined(minutesLonWhole)) {
              if (_.isUndefined(minutesLonDecimal)) {
                minutesLon = parseInt(minutesLonWhole, 10);
                cleanLongitude = cleanLongitude + " " + (pad(2, minutesLon, '0'));
                if (!_.isUndefined(secondsLonWhole)) {
                  if (_.isUndefined(secondsLonDecimal)) {
                    secondsLon = parseInt(secondsLonWhole, 10);
                    cleanLongitude = cleanLongitude + " " + (pad(2, secondsLon, '0'));
                  } else {
                    mixedWhole = secondsLonWhole;
                    mixedDecimal = secondsLonDecimal;
                    secondsLon = parseFloat(mixedWhole + "." + mixedDecimal);
                    cleanLongitude = cleanLongitude + " " + (pad(2, secondsLon, '0'));
                  }
                }
              } else {
                mixedWhole = minutesLonWhole;
                mixedDecimal = minutesLonDecimal;
                minutesLon = parseFloat(mixedWhole + "." + mixedDecimal);
                cleanLongitude = cleanLongitude + " " + (pad(2, minutesLon, '0'));
              }
            }
          } else {
            mixedWhole = degreesLonWhole;
            mixedDecimal = degreesLonDecimal;
            degreesLon = parseFloat(mixedWhole + "." + mixedDecimal);
            cleanLongitude = "" + (pad(3, degreesLon, '0'));
          }
          if (DEBUG) {
            console.log("degreesLat: " + degreesLat + ", minutesLat: " + minutesLat + ", secondsLat: " + secondsLat);
          }
          if (DEBUG) {
            console.log("degreesLon: " + degreesLon + ", minutesLon: " + minutesLon + ", secondsLon: " + secondsLon);
          }
          workingLat = degreesLat + (minutesLat + secondsLat / 60) / 60;
          workingLon = degreesLon + (minutesLon + secondsLon / 60) / 60;
          workingLat = parseFloat(workingLat.toFixed(8), 10);
          workingLon = parseFloat(workingLon.toFixed(8), 10);
          if (DEBUG) {
            console.log("workingLat: " + workingLat + ", workingLon: " + workingLon);
          }
          if (workingLat <= 90 && workingLon <= 180) {
            hemisphereLat = 'N';
            hemisphereLon = 'E';
            if (!_.isUndefined(leadingLatSignHemisphere)) {
              if (signRegEx.test(leadingLatSignHemisphere) && leadingLatSignHemisphere === '-') {
                hemisphereLat = 'S';
              } else if (hemisphereLatRegEx.test(leadingLatSignHemisphere) && leadingLatSignHemisphere.toUpperCase() === 'S') {
                hemisphereLat = 'S';
              }
            } else if (!_.isUndefined(trailingLatHemisphere)) {
              if (hemisphereLatRegEx.test(trailingLatHemisphere) && trailingLatHemisphere.toUpperCase() === 'S') {
                hemisphereLat = 'S';
              }
            }
            if (hemisphereLat === 'S') {
              workingLat = workingLat * -1;
            }
            if (!_.isUndefined(leadingLonSignHemisphere)) {
              if (signRegEx.test(leadingLonSignHemisphere) && leadingLonSignHemisphere === '-') {
                hemisphereLon = 'W';
              } else if (hemisphereLonRegEx.test(leadingLonSignHemisphere) && leadingLonSignHemisphere.toUpperCase() === 'W') {
                hemisphereLon = 'W';
              }
            } else if (!_.isUndefined(trailingLonHemisphere)) {
              if (hemisphereLonRegEx.test(trailingLonHemisphere) && trailingLonHemisphere.toUpperCase() === 'W') {
                hemisphereLon = 'W';
              }
            }
            if (hemisphereLon === 'W') {
              workingLon = workingLon * -1;
            }
            if (DEBUG) {
              console.log("Valid input " + object.originalInput);
            }
            if (DEBUG) {
              console.log("lat: " + workingLat + ", lon: " + workingLon);
            }
            resultsArray.push({
              originalFormat: 'lat_lon',
              originalInput: originalInput,
              originalHighlight: [object.startIndex, object.length],
              originalLatitude: originalLat,
              originalLongitude: originalLon,
              latitude: workingLat,
              longitude: workingLon,
              mgrs: mgrsLib.forward([workingLon, workingLat]),
              formattedLatLon: cleanLatitude + " " + hemisphereLat + ", " + cleanLongitude + " " + hemisphereLon
            });
          }
        }
      }
      if (DEBUG) {
        console.log(JSON.stringify(resultsArray));
      }
      return resultsArray;
    }
  };
})();

export default LocRec;
